NAME
    Class::C3::Componentised - Load mix-ins or components to your C3-based
    class

SYNOPSIS
      package MyModule;

      use strict;
      use warnings;

      use base 'Class::C3::Componentised';

      sub component_base_class { "MyModule::Component" }

      package main;

      MyModule->load_components( qw/Foo Bar/ );
      # Will load MyModule::Component::Foo and MyModule::Component::Bar

DESCRIPTION
    This will inject base classes to your module using the Class::C3 method
    resolution order.

    Please note: these are not plugins that can take precedence over methods
    declared in MyModule. If you want something like that, consider
    MooseX::Object::Pluggable.

METHODS
  load_components( @comps )
    Loads the given components into the current module. If a module begins
    with a "+" character, it is taken to be a fully qualified class name,
    otherwise "$class->component_base_class" is prepended to it.

    Calling this will call "Class::C3::reinitialize".

  load_own_components( @comps )
    Similar to load_components, but assumes every class is "$class::$comp".

  load_optional_components
    As load_components, but will silently ignore any components that cannot
    be found.

  ensure_class_loaded
    Given a class name, tests to see if it is already loaded or otherwise
    defined. If it is not yet loaded, the package is require'd, and an
    exception is thrown if the class is still not loaded.

     BUG: For some reason, packages with syntax errors are added to %INC on
          require

  ensure_class_found
    Returns true if the specified class is installed or already loaded,
    false otherwise.

  inject_base
    Does the actual magic of adjusting @ISA on the target module.

  load_optional_class
    Returns a true value if the specified class is installed and loaded
    successfully, throws an exception if the class is found but not loaded
    successfully, and false if the class is not installed

AUTHORS
    Matt S. Trout and the DBIx::Class team

    Pulled out into separate module by Ash Berlin "<ash@cpan.org>"

    Optimizations and overall bolt-tightening by Peter "ribasushi" Rabbitson
    "<ribasushi@cpan.org>"

COPYRIGHT
    Copyright (c) 2006 - 2011 the Class::C3::Componentised "AUTHORS" as
    listed above.

LICENSE
    You may distribute this code under the same terms as Perl itself.

